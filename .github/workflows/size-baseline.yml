name: Size Baseline Capture

on:
  push:
    branches:
      - size-baseline

env:
  PLATFORMIO_CACHE_DIR: ~/.platformio/.cache

jobs:
  capture-size-baseline:
    name: Capture Size Baseline Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache PlatformIO
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ${{ env.PLATFORMIO_CACHE_DIR }}
          key: ${{ runner.os }}-pio-${{ hashFiles('platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-

      - name: Install dependencies
        run: |
          pip install --upgrade platformio
          sudo apt-get install build-essential

      - name: Build release and capture artifacts
        run: |
          # Clean build with verbose output - use release environment for size baseline
          pio run -e ttgo-lora32-v1-release -v > ci-build-release.log 2>&1 || RELEASE_BUILD_FAILED=1
          
          # Create baseline artifacts directory
          mkdir -p ci-baseline-artifacts
          
          # Copy build log first (always available)
          cp ci-build-release.log ci-baseline-artifacts/
          
          # Copy generated files if they exist
          if [ -f ".pio/build/ttgo-lora32-v1-release/firmware.elf" ]; then
            cp .pio/build/ttgo-lora32-v1-release/firmware.elf ci-baseline-artifacts/release-firmware.elf
          else
            echo "WARNING: release firmware.elf not found" >> ci-baseline-artifacts/build-warnings.txt
          fi
          
          if [ -f ".pio/build/ttgo-lora32-v1-release/firmware.map" ]; then
            cp .pio/build/ttgo-lora32-v1-release/firmware.map ci-baseline-artifacts/release-firmware.map
          else
            echo "WARNING: release firmware.map not found" >> ci-baseline-artifacts/build-warnings.txt
          fi
          
          # Extract memory usage information
          echo "Size Baseline - CI Build" > ci-baseline-artifacts/ci-memory-usage.txt
          echo "========================" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "Build Environment: ubuntu-latest (GitHub Actions)" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "Git Branch: ${{ github.ref_name }}" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "Git Commit: ${{ github.sha }}" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "" >> ci-baseline-artifacts/ci-memory-usage.txt
          
          # Extract RAM and Flash usage from build log
          echo "RELEASE BUILD (ttgo-lora32-v1-release):" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "========================================" >> ci-baseline-artifacts/ci-memory-usage.txt
          if grep -q "RAM:\|Flash:" ci-build-release.log; then
            grep -A 2 -B 2 "RAM:\|Flash:" ci-build-release.log >> ci-baseline-artifacts/ci-memory-usage.txt
          else
            echo "WARNING: No memory usage information found in release build log" >> ci-baseline-artifacts/ci-memory-usage.txt
          fi
          
          # Record release build status
          if [ "$RELEASE_BUILD_FAILED" = "1" ]; then
            echo "RELEASE BUILD STATUS: FAILED" >> ci-baseline-artifacts/ci-memory-usage.txt
            echo "Release build failed - artifacts may be incomplete" >> ci-baseline-artifacts/build-warnings.txt
          else
            echo "RELEASE BUILD STATUS: SUCCESS" >> ci-baseline-artifacts/ci-memory-usage.txt
          fi
          
          echo "" >> ci-baseline-artifacts/ci-memory-usage.txt
          
      - name: Build debug and capture artifacts
        run: |
          # Build debug environment for comparison
          pio run -e ttgo-lora32-v1-debug -v > ci-build-debug.log 2>&1 || DEBUG_BUILD_FAILED=1
          
          # Copy debug build log
          cp ci-build-debug.log ci-baseline-artifacts/
          
          # Copy debug generated files if they exist
          if [ -f ".pio/build/ttgo-lora32-v1-debug/firmware.elf" ]; then
            cp .pio/build/ttgo-lora32-v1-debug/firmware.elf ci-baseline-artifacts/debug-firmware.elf
          else
            echo "WARNING: debug firmware.elf not found" >> ci-baseline-artifacts/build-warnings.txt
          fi
          
          if [ -f ".pio/build/ttgo-lora32-v1-debug/firmware.map" ]; then
            cp .pio/build/ttgo-lora32-v1-debug/firmware.map ci-baseline-artifacts/debug-firmware.map
          else
            echo "WARNING: debug firmware.map not found" >> ci-baseline-artifacts/build-warnings.txt
          fi
          
          # Add debug build info to memory usage report
          echo "DEBUG BUILD (ttgo-lora32-v1-debug):" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "====================================" >> ci-baseline-artifacts/ci-memory-usage.txt
          if grep -q "RAM:\|Flash:" ci-build-debug.log; then
            grep -A 2 -B 2 "RAM:\|Flash:" ci-build-debug.log >> ci-baseline-artifacts/ci-memory-usage.txt
          else
            echo "WARNING: No memory usage information found in debug build log" >> ci-baseline-artifacts/ci-memory-usage.txt
          fi
          
          # Record debug build status
          if [ "$DEBUG_BUILD_FAILED" = "1" ]; then
            echo "DEBUG BUILD STATUS: FAILED" >> ci-baseline-artifacts/ci-memory-usage.txt
            echo "Debug build failed - artifacts may be incomplete" >> ci-baseline-artifacts/build-warnings.txt
          else
            echo "DEBUG BUILD STATUS: SUCCESS" >> ci-baseline-artifacts/ci-memory-usage.txt
          fi
          
          echo "" >> ci-baseline-artifacts/ci-memory-usage.txt
          echo "ARTIFACT FILES:" >> ci-baseline-artifacts/ci-memory-usage.txt
          ls -la ci-baseline-artifacts/ >> ci-baseline-artifacts/ci-memory-usage.txt

      - name: Upload CI baseline artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-size-baseline-${{ github.sha }}
          path: ci-baseline-artifacts/
          retention-days: 90

      - name: Display memory usage summary
        run: |
          echo "=== CI BUILD MEMORY USAGE SUMMARY ==="
          echo "" 
          echo "--- RELEASE BUILD ---"
          if [ -f "ci-build-release.log" ]; then
            grep -A 10 -B 5 "RAM:\|Flash:" ci-build-release.log || echo "Memory usage information not found in release build log"
          else
            echo "Release build log not found"
          fi
          echo ""
          echo "--- DEBUG BUILD ---"
          if [ -f "ci-build-debug.log" ]; then
            grep -A 10 -B 5 "RAM:\|Flash:" ci-build-debug.log || echo "Memory usage information not found in debug build log"
          else
            echo "Debug build log not found"
          fi
          echo ""
          echo "=== ARTIFACT FILES ==="
          ls -la ci-baseline-artifacts/
          echo ""
          echo "=== WARNINGS (if any) ==="
          if [ -f "ci-baseline-artifacts/build-warnings.txt" ]; then
            cat ci-baseline-artifacts/build-warnings.txt
          else
            echo "No warnings found"
          fi
